/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as OwnerOnlyContractJson } from "../test/OwnerOnly.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Balances, MapValue, TokenBalance, AllStructs } from "./types";

// Custom types for the contract
export namespace OwnerOnlyTypes {
  export type Fields = {
    owner: Address;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  OwnerOnlyInstance,
  OwnerOnlyTypes.Fields
> {
  encodeFields(fields: OwnerOnlyTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as OwnerOnlyTypes.Fields;
  }

  at(address: string): OwnerOnlyInstance {
    return new OwnerOnlyInstance(address);
  }

  tests = {
    testOwner: async (
      params: Omit<
        TestContractParamsWithoutMaps<OwnerOnlyTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "testOwner", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OwnerOnly = new Factory(
  Contract.fromJson(
    OwnerOnlyContractJson,
    "",
    "c8ecfd7b7e1f3d0169d80e0abb59702516eeff301d47e0e7be70a631bd9414ca",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class OwnerOnlyInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OwnerOnlyTypes.State> {
    return fetchContractState(OwnerOnly, this);
  }
}
