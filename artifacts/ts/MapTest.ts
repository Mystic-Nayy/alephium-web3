/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as MapTestContractJson } from "../test/MapTest.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Balances, MapValue, TokenBalance, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace MapTestTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<MapTestInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  at(address: string): MapTestInstance {
    return new MapTestInstance(address);
  }

  tests = {
    insert: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address; value: MapValue },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "insert", params);
    },
    update: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "update", params);
    },
    remove: async (
      params: Omit<
        TestContractParams<
          never,
          { key: Address },
          { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
        >,
        "initialFields"
      >
    ): Promise<
      TestContractResult<
        null,
        { map0?: Map<Address, MapValue>; map1?: Map<bigint, bigint> }
      >
    > => {
      return testMethod(this, "remove", params);
    },
  };
}

// Use this object to test and deploy the contract
export const MapTest = new Factory(
  Contract.fromJson(
    MapTestContractJson,
    "=6-2+73=2-2+d8=2-2+69=11-1+a=50+7a7e0214696e73657274206174206d617020706174683a2000=56+7a7e0214696e73657274206174206d617020706174683a2000=227-1+9=124+7a7e021472656d6f7665206174206d617020706174683a2000=46+7a7e021472656d6f7665206174206d617020706174683a2000=6",
    "034dec32e1107787800ec476a31b11ed2f5c201c06aa9360d1a1a074d6b29098",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class MapTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    map0: new RalphMap<Address, MapValue>(MapTest.contract, this, "map0"),
    map1: new RalphMap<bigint, bigint>(MapTest.contract, this, "map1"),
  };

  async fetchState(): Promise<MapTestTypes.State> {
    return fetchContractState(MapTest, this);
  }
}
